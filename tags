!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AnchorGenerator	src/retina_detection/third_party/detectron2/anchors.py	/^class AnchorGenerator:$/;"	c
BasicBlock	src/retina_detection/third_party/resnet.py	/^class BasicBlock(nn.Module):$/;"	c
BasicBlock	src/retina_detection/third_party/torchvision/resnet.py	/^class BasicBlock(nn.Module):$/;"	c
Bottleneck	src/retina_detection/third_party/resnet.py	/^class Bottleneck(nn.Module):$/;"	c
Bottleneck	src/retina_detection/third_party/torchvision/resnet.py	/^class Bottleneck(nn.Module):$/;"	c
BoundingBox	src/retina_detection/third_party/detectron2/pascal_voc.py	/^class BoundingBox:$/;"	c
BoundingBox	src/retina_detection/third_party/detectron2/postprocess.py	/^class BoundingBox:$/;"	c
CATEGORIES	src/retina_detection/train/train_utils/combine_coco.py	/^CATEGORIES = []$/;"	v
CLASSES	src/retina_detection/train/train_utils/combine_coco.py	/^CLASSES = {"zebra": False, "giraffe": False, "rhincodon_typus": False}$/;"	v
Collate	src/retina_detection/train/collate.py	/^class Collate:$/;"	c
CollateVal	src/retina_detection/train/collate.py	/^class CollateVal:$/;"	c
DetectionDataset	src/retina_detection/train/dataset.py	/^class DetectionDataset(data.Dataset):$/;"	c
Detector	src/retina_detection/model/detector.py	/^class Detector(torch.nn.Module):$/;"	c
FPN	src/retina_detection/model/fpn.py	/^class FPN(torch.nn.Module):$/;"	c
Log	src/retina_detection/train/train_utils/logger.py	/^class Log:$/;"	c
Matcher	src/retina_detection/third_party/detectron2/losses.py	/^class Matcher:$/;"	c
ObjectDectors	src/retina_detection/test.py	/^class ObjectDectors(object):$/;"	c
PostProcessor	src/retina_detection/third_party/detectron2/postprocess.py	/^class PostProcessor:$/;"	c
Ranger	src/retina_detection/third_party/ranger.py	/^class Ranger(Optimizer):$/;"	c
Regressor	src/retina_detection/third_party/detectron2/regression.py	/^class Regressor:$/;"	c
ResNet	src/retina_detection/third_party/resnet.py	/^class ResNet(nn.Module):$/;"	c
ResNet	src/retina_detection/third_party/torchvision/resnet.py	/^class ResNet(nn.Module):$/;"	c
RetinaNetHead	src/retina_detection/third_party/detectron2/retinanet_head.py	/^class RetinaNetHead(torch.nn.Module):$/;"	c
_DEFAULT_SCALE_CLAMP	src/retina_detection/third_party/detectron2/regression.py	/^_DEFAULT_SCALE_CLAMP = math.log(1000.0 \/ 16)$/;"	v
_IMG_DIR	src/retina_detection/train/train_utils/yolo_to_coco.py	/^_IMG_DIR = pathlib.Path(".\/src\/train\/data\/images")$/;"	v
_IMG_EXTS	src/retina_detection/train/train_utils/yolo_to_coco.py	/^_IMG_EXTS = [".jpg", ".jpeg", ".png"]$/;"	v
_IMG_SAVE_DIR	src/retina_detection/train/train_utils/yolo_to_coco.py	/^_IMG_SAVE_DIR = _SAVE_DIR \/ "images"$/;"	v
_LABELS_DIR	src/retina_detection/train/train_utils/yolo_to_coco.py	/^_LABELS_DIR = pathlib.Path(".\/src\/train\/data\/labels")$/;"	v
_LOG_INTERVAL	src/retina_detection/train/train.py	/^_LOG_INTERVAL = 10$/;"	v
_SAVE_DIR	src/retina_detection/train/train.py	/^_SAVE_DIR = pathlib.Path("~\/runs\/tire-detector").expanduser()$/;"	v
_SAVE_DIR	src/retina_detection/train/train_utils/yolo_to_coco.py	/^_SAVE_DIR = pathlib.Path(".\/src\/train\/data\/tire-dataset")$/;"	v
__all__	src/retina_detection/third_party/resnet.py	/^__all__ = [$/;"	v
__all__	src/retina_detection/third_party/torchvision/resnet.py	/^__all__ = [$/;"	v
__call__	src/retina_detection/model/detector.py	/^    def __call__(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Detector	file:
__call__	src/retina_detection/model/fpn.py	/^    def __call__($/;"	m	class:FPN	file:
__call__	src/retina_detection/third_party/detectron2/losses.py	/^    def __call__(self, match_quality_matrix: torch.Tensor):$/;"	m	class:Matcher	file:
__call__	src/retina_detection/third_party/detectron2/postprocess.py	/^    def __call__($/;"	m	class:PostProcessor	file:
__call__	src/retina_detection/third_party/detectron2/retinanet_head.py	/^    def __call__($/;"	m	class:RetinaNetHead	file:
__call__	src/retina_detection/train/collate.py	/^    def __call__($/;"	m	class:Collate	file:
__call__	src/retina_detection/train/collate.py	/^    def __call__(self, data_batch: List[dict]) -> Tuple[torch.Tensor, torch.Tensor]:$/;"	m	class:CollateVal	file:
__getitem__	src/retina_detection/train/dataset.py	/^    def __getitem__(self, idx: int) -> Tuple[torch.Tensor, torch.Tensor]:$/;"	m	class:DetectionDataset	file:
__init__	src/retina_detection/model/detector.py	/^    def __init__($/;"	m	class:Detector
__init__	src/retina_detection/model/fpn.py	/^    def __init__($/;"	m	class:FPN
__init__	src/retina_detection/test.py	/^    def __init__(self, wait=0.0):$/;"	m	class:ObjectDectors
__init__	src/retina_detection/third_party/detectron2/anchors.py	/^    def __init__($/;"	m	class:AnchorGenerator
__init__	src/retina_detection/third_party/detectron2/losses.py	/^    def __init__($/;"	m	class:Matcher
__init__	src/retina_detection/third_party/detectron2/postprocess.py	/^    def __init__($/;"	m	class:PostProcessor
__init__	src/retina_detection/third_party/detectron2/regression.py	/^    def __init__(self, scale_clamp: float = _DEFAULT_SCALE_CLAMP) -> None:$/;"	m	class:Regressor
__init__	src/retina_detection/third_party/detectron2/retinanet_head.py	/^    def __init__($/;"	m	class:RetinaNetHead
__init__	src/retina_detection/third_party/ranger.py	/^    def __init__($/;"	m	class:Ranger
__init__	src/retina_detection/third_party/resnet.py	/^    def __init__($/;"	m	class:BasicBlock
__init__	src/retina_detection/third_party/resnet.py	/^    def __init__($/;"	m	class:Bottleneck
__init__	src/retina_detection/third_party/resnet.py	/^    def __init__($/;"	m	class:ResNet
__init__	src/retina_detection/third_party/torchvision/resnet.py	/^    def __init__($/;"	m	class:BasicBlock
__init__	src/retina_detection/third_party/torchvision/resnet.py	/^    def __init__($/;"	m	class:Bottleneck
__init__	src/retina_detection/third_party/torchvision/resnet.py	/^    def __init__($/;"	m	class:ResNet
__init__	src/retina_detection/train/collate.py	/^    def __init__(self) -> None:$/;"	m	class:CollateVal
__init__	src/retina_detection/train/collate.py	/^    def __init__(self, original_anchors: torch.Tensor, num_classes: int) -> None:$/;"	m	class:Collate
__init__	src/retina_detection/train/dataset.py	/^    def __init__($/;"	m	class:DetectionDataset
__init__	src/retina_detection/train/train_utils/logger.py	/^    def __init__(self, log_file: pathlib.Path) -> None:$/;"	m	class:Log
__len__	src/retina_detection/train/dataset.py	/^    def __len__(self) -> int:$/;"	m	class:DetectionDataset	file:
__setstate__	src/retina_detection/third_party/ranger.py	/^    def __setstate__(self, state):$/;"	m	class:Ranger	file:
__str__	src/retina_detection/train/dataset.py	/^    def __str__(self) -> str:$/;"	m	class:DetectionDataset	file:
_create_grid_offsets	src/retina_detection/third_party/detectron2/anchors.py	/^    def _create_grid_offsets($/;"	m	class:AnchorGenerator
_forward_impl	src/retina_detection/third_party/resnet.py	/^    def _forward_impl(self, x: Tensor) -> Tensor:$/;"	m	class:ResNet
_forward_impl	src/retina_detection/third_party/torchvision/resnet.py	/^    def _forward_impl(self, x: Tensor) -> Tensor:$/;"	m	class:ResNet
_generate_cell_anchors	src/retina_detection/third_party/detectron2/anchors.py	/^    def _generate_cell_anchors($/;"	m	class:AnchorGenerator
_grid_anchors	src/retina_detection/third_party/detectron2/anchors.py	/^    def _grid_anchors(self, grid_sizes: np.ndarray) -> List[torch.Tensor]:$/;"	m	class:AnchorGenerator
_load_backbone	src/retina_detection/model/detector.py	/^    def _load_backbone(self, backbone: str, kwargs) -> torch.nn.Module:$/;"	m	class:Detector
_load_fpn	src/retina_detection/model/detector.py	/^    def _load_fpn(self, fpn_name: str, features: List[int]) -> torch.nn.Module:$/;"	m	class:Detector
_load_params	src/retina_detection/model/detector.py	/^    def _load_params(self, config: dict) -> None:$/;"	m	class:Detector
_make_layer	src/retina_detection/third_party/resnet.py	/^    def _make_layer($/;"	m	class:ResNet
_make_layer	src/retina_detection/third_party/torchvision/resnet.py	/^    def _make_layer($/;"	m	class:ResNet
_resnet	src/retina_detection/third_party/resnet.py	/^def _resnet($/;"	f
_resnet	src/retina_detection/third_party/torchvision/resnet.py	/^def _resnet($/;"	f
add_weight_decay	src/retina_detection/train/train_utils/utils.py	/^def add_weight_decay($/;"	f
apply_deltas	src/retina_detection/third_party/detectron2/regression.py	/^    def apply_deltas(self, deltas: torch.Tensor, boxes: torch.Tensor):$/;"	m	class:Regressor
args	src/retina_detection/train/train.py	/^    args = parser.parse_args()$/;"	v
args	src/retina_detection/train/train_utils/combine_coco.py	/^    args = parser.parse_args()$/;"	v
b	src/retina_detection/train/train_utils/yolo_to_coco.py	/^            b = [x * img_width, y * img_height, w * img_width, h * img_height]$/;"	v
box	src/retina_detection/main.py	/^        box = (box.box * torch.Tensor([512] * 4)).int().tolist()$/;"	v
boxes	src/retina_detection/main.py	/^        boxes = model.get_boxes(image.permute(2, 0, 1).unsqueeze(0))$/;"	v
cat	src/retina_detection/third_party/detectron2/postprocess.py	/^def cat(tensors, dim=0):$/;"	f
coco_dataset	src/retina_detection/train/train_utils/yolo_to_coco.py	/^coco_dataset = {$/;"	v
compute_losses	src/retina_detection/third_party/detectron2/losses.py	/^def compute_losses($/;"	f
compute_metrics	src/retina_detection/third_party/detectron2/pascal_voc.py	/^def compute_metrics($/;"	f
confidence	src/retina_detection/main.py	/^        confidence = float(box.confidence)$/;"	v
config	src/retina_detection/train/train.py	/^    config = yaml.safe_load(config_path.read_text())$/;"	v
config_path	src/retina_detection/train/train.py	/^    config_path = args.config.expanduser()$/;"	v
conv1x1	src/retina_detection/third_party/resnet.py	/^def conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:$/;"	f
conv1x1	src/retina_detection/third_party/torchvision/resnet.py	/^def conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:$/;"	f
conv3x3	src/retina_detection/model/fpn.py	/^def conv3x3(in_channels: int, out_channels: int):$/;"	f
conv3x3	src/retina_detection/third_party/detectron2/retinanet_head.py	/^def conv3x3(in_channels: int, out_channels: int):$/;"	f
conv3x3	src/retina_detection/third_party/resnet.py	/^def conv3x3($/;"	f
conv3x3	src/retina_detection/third_party/torchvision/resnet.py	/^def conv3x3($/;"	f
create_data_loader	src/retina_detection/train/train.py	/^def create_data_loader($/;"	f
create_optimizer	src/retina_detection/train/train_utils/utils.py	/^def create_optimizer(optim_cfg: dict, model: torch.nn.Module) -> torch.optim.Optimizer:$/;"	f
d	setup.py	/^d=generate_distutils_setup($/;"	v
data	src/retina_detection/train/train_utils/add_no_label_set.py	/^data = json.loads(json_file.read_text())$/;"	v
data_cfg	src/retina_detection/train/train.py	/^    data_cfg = config["data"]$/;"	v
default	src/retina_detection/train/train.py	/^        default=None,$/;"	v
delete_classification_head	src/retina_detection/third_party/resnet.py	/^    def delete_classification_head(self) -> None:$/;"	m	class:ResNet
delete_classification_head	src/retina_detection/third_party/torchvision/resnet.py	/^    def delete_classification_head(self) -> None:$/;"	m	class:ResNet
depthwise	src/retina_detection/model/fpn.py	/^def depthwise(in_channels: int, out_channels: int):$/;"	f
depthwise	src/retina_detection/third_party/detectron2/retinanet_head.py	/^def depthwise(in_channels: int, out_channels: int):$/;"	f
description	src/retina_detection/train/train.py	/^        description="Trainer code for RetinaNet-based detection models."$/;"	v
det_train_augs	src/retina_detection/train/augmentations.py	/^def det_train_augs(height: int, width: int) -> albu.Compose:$/;"	f
det_val_augs	src/retina_detection/train/augmentations.py	/^def det_val_augs(height: int, width: int) -> albu.Compose:$/;"	f
detection_manager	src/retina_detection/test.py	/^    detection_manager = ObjectDectors()$/;"	v	class:ObjectDectors
error	src/retina_detection/train/train_utils/logger.py	/^    def error(self, message: str) -> None:$/;"	m	class:Log
eval	src/retina_detection/train/train.py	/^def eval($/;"	f
filename	src/retina_detection/main.py	/^    filename= testdata_path+str(i)+".jpg"$/;"	v
forward	src/retina_detection/third_party/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:BasicBlock
forward	src/retina_detection/third_party/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:Bottleneck
forward	src/retina_detection/third_party/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:ResNet
forward	src/retina_detection/third_party/torchvision/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:BasicBlock
forward	src/retina_detection/third_party/torchvision/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:Bottleneck
forward	src/retina_detection/third_party/torchvision/resnet.py	/^    def forward(self, x: Tensor) -> Tensor:$/;"	m	class:ResNet
forward_pyramids	src/retina_detection/third_party/resnet.py	/^    def forward_pyramids(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:ResNet
forward_pyramids	src/retina_detection/third_party/torchvision/resnet.py	/^    def forward_pyramids(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:ResNet
get_boxes	src/retina_detection/model/detector.py	/^    def get_boxes(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Detector
get_deltas	src/retina_detection/third_party/detectron2/regression.py	/^    def get_deltas($/;"	m	class:Regressor
get_ground_truth	src/retina_detection/third_party/detectron2/losses.py	/^def get_ground_truth($/;"	f
get_pyramid_channels	src/retina_detection/third_party/resnet.py	/^    def get_pyramid_channels(self) -> None:$/;"	m	class:ResNet
get_pyramid_channels	src/retina_detection/third_party/torchvision/resnet.py	/^    def get_pyramid_channels(self) -> None:$/;"	m	class:ResNet
help	src/retina_detection/train/train.py	/^        help="Model timestamp to load as a starting point.",$/;"	v
help	src/retina_detection/train/train.py	/^        help="Path to yaml model definition.",$/;"	v
help	src/retina_detection/train/train_utils/combine_coco.py	/^        help="Comma separated list of metadata paths.",$/;"	v
image	src/retina_detection/main.py	/^            image = image.cuda()$/;"	v
image	src/retina_detection/main.py	/^        image = torch.Tensor(image)$/;"	v
image	src/retina_detection/main.py	/^    image = cv2.imread(filename)$/;"	v
image	src/retina_detection/main.py	/^    image = normalize(image_ori)$/;"	v
image	src/retina_detection/train/train_utils/yolo_to_coco.py	/^    image = cv2.imread(str(img))$/;"	v
image_callback	src/retina_detection/test.py	/^    def image_callback(self,msg):$/;"	m	class:ObjectDectors
image_dir	src/retina_detection/train/train_utils/add_no_label_set.py	/^image_dir = pathlib.Path("\/home\/alex\/Downloads\/archive (2)\/shark-images")$/;"	v
image_dirs	src/retina_detection/train/train_utils/combine_coco.py	/^    image_dirs = [$/;"	v
image_ori	src/retina_detection/main.py	/^    image_ori = cv2.resize(image, (512, 512))$/;"	v
images	src/retina_detection/train/train_utils/yolo_to_coco.py	/^images = []$/;"	v
inference_batch	src/retina_detection/third_party/detectron2/postprocess.py	/^    def inference_batch($/;"	m	class:PostProcessor
info	src/retina_detection/train/train_utils/logger.py	/^    def info(self, message: str) -> None:$/;"	m	class:Log
initial_timestamp	src/retina_detection/train/train.py	/^        initial_timestamp = _SAVE_DIR \/ args.initial_timestamp$/;"	v
initial_timestamp	src/retina_detection/train/train.py	/^    initial_timestamp = None$/;"	v
join	src/retina_detection/train/train.py	/^            join=True,$/;"	v
json_file	src/retina_detection/train/train_utils/add_no_label_set.py	/^json_file = pathlib.Path($/;"	v
label_data	src/retina_detection/train/train_utils/yolo_to_coco.py	/^    label_data = []$/;"	v
label_path	src/retina_detection/train/train_utils/yolo_to_coco.py	/^    label_path = _LABELS_DIR \/ img.with_suffix(".txt").name$/;"	v
listener	src/retina_detection/test.py	/^    def listener(self,wait=0.0):$/;"	m	class:ObjectDectors
merge_datasets	src/retina_detection/train/train_utils/combine_coco.py	/^def merge_datasets($/;"	f
metadata_paths	src/retina_detection/train/train_utils/combine_coco.py	/^    metadata_paths = [$/;"	v
model	src/retina_detection/main.py	/^    model = detector.Detector(timestamp="2021-04-22T11.25.25")$/;"	v
model_cfg	src/retina_detection/train/train.py	/^    model_cfg = config["model"]$/;"	v
model_urls	src/retina_detection/third_party/resnet.py	/^model_urls = {$/;"	v
model_urls	src/retina_detection/third_party/torchvision/resnet.py	/^model_urls = {$/;"	v
normalize	src/retina_detection/main.py	/^def normalize($/;"	f
normalize	src/retina_detection/test.py	/^    def normalize(self, $/;"	m	class:ObjectDectors
nprocs	src/retina_detection/train/train.py	/^            nprocs=world_size,$/;"	v
num_data	src/retina_detection/main.py	/^num_data = 8$/;"	v
original_path	src/retina_detection/test.py	/^original_path = sys.path $/;"	v
packages	setup.py	/^        packages=['retina_detection'],$/;"	v
packages_dir	setup.py	/^        packages_dir={'': 'src'}$/;"	v
parser	src/retina_detection/train/train.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	src/retina_detection/train/train_utils/combine_coco.py	/^    parser = argparse.ArgumentParser(__doc__)$/;"	v
permute_to_N_HWA_K	src/retina_detection/third_party/detectron2/postprocess.py	/^def permute_to_N_HWA_K(retina_tensor: torch.Tensor, num_classes: int) -> torch.Tensor:$/;"	f
permute_to_N_HWA_K_and_concat	src/retina_detection/third_party/detectron2/postprocess.py	/^def permute_to_N_HWA_K_and_concat($/;"	f
required	src/retina_detection/train/train.py	/^        required=True,$/;"	v
required	src/retina_detection/train/train_utils/combine_coco.py	/^        required=True,$/;"	v
resnet101	src/retina_detection/third_party/resnet.py	/^def resnet101(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet101	src/retina_detection/third_party/torchvision/resnet.py	/^def resnet101(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet152	src/retina_detection/third_party/resnet.py	/^def resnet152(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet152	src/retina_detection/third_party/torchvision/resnet.py	/^def resnet152(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet18	src/retina_detection/third_party/resnet.py	/^def resnet18(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet18	src/retina_detection/third_party/torchvision/resnet.py	/^def resnet18(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet34	src/retina_detection/third_party/resnet.py	/^def resnet34(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet34	src/retina_detection/third_party/torchvision/resnet.py	/^def resnet34(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet50	src/retina_detection/third_party/resnet.py	/^def resnet50(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnet50	src/retina_detection/third_party/torchvision/resnet.py	/^def resnet50(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:$/;"	f
resnext101_32x8d	src/retina_detection/third_party/resnet.py	/^def resnext101_32x8d($/;"	f
resnext101_32x8d	src/retina_detection/third_party/torchvision/resnet.py	/^def resnext101_32x8d($/;"	f
resnext50_32x4d	src/retina_detection/third_party/resnet.py	/^def resnext50_32x4d($/;"	f
resnext50_32x4d	src/retina_detection/third_party/torchvision/resnet.py	/^def resnext50_32x4d($/;"	f
save_dir	src/retina_detection/train/train.py	/^    save_dir = _SAVE_DIR \/ ($/;"	v
save_dir	src/retina_detection/train/train_utils/add_no_label_set.py	/^save_dir = ($/;"	v
save_model	src/retina_detection/train/train_utils/utils.py	/^def save_model(model: torch.nn.Module, save_path: pathlib.Path) -> None:$/;"	f
save_path	src/retina_detection/main.py	/^save_path = "data\/result\/"$/;"	v
save_path	src/retina_detection/train/train_utils/yolo_to_coco.py	/^save_path = _SAVE_DIR \/ "annotations.json"$/;"	v
savefilename	src/retina_detection/main.py	/^    savefilename=save_path+str(i)+".jpg"$/;"	v
set_low_quality_matches_	src/retina_detection/third_party/detectron2/losses.py	/^    def set_low_quality_matches_(self, match_labels, match_quality_matrix):$/;"	m	class:Matcher
sigmoid_focal_loss	src/retina_detection/third_party/detectron2/losses.py	/^def sigmoid_focal_loss($/;"	f
smooth_l1_loss	src/retina_detection/third_party/detectron2/losses.py	/^def smooth_l1_loss($/;"	f
step	src/retina_detection/third_party/ranger.py	/^    def step(self, closure=None):$/;"	m	class:Ranger
test	src/retina_detection/test.py	/^    def test(self):$/;"	m	class:ObjectDectors
testdata_path	src/retina_detection/main.py	/^testdata_path = "data\/"$/;"	v
train	src/retina_detection/train/train.py	/^def train($/;"	f
train_cfg	src/retina_detection/train/train.py	/^    train_cfg = config["training"]$/;"	v
type	src/retina_detection/train/train.py	/^        type=pathlib.Path,$/;"	v
type	src/retina_detection/train/train.py	/^        type=str,$/;"	v
type	src/retina_detection/train/train_utils/combine_coco.py	/^        type=str,$/;"	v
unwrap_model	src/retina_detection/train/train_utils/utils.py	/^def unwrap_model(model: Any) -> torch.nn.Module:$/;"	f
use_cuda	src/retina_detection/train/train.py	/^    use_cuda = torch.cuda.is_available()$/;"	v
voc_ap	src/retina_detection/third_party/detectron2/pascal_voc.py	/^def voc_ap(recall: List[float], precision: List[float],) -> Tuple[float, float, float]:$/;"	f
voc_eval	src/retina_detection/third_party/detectron2/pascal_voc.py	/^def voc_eval($/;"	f
warning	src/retina_detection/train/train_utils/logger.py	/^    def warning(self, message: str) -> None:$/;"	m	class:Log
wide_resnet101_2	src/retina_detection/third_party/resnet.py	/^def wide_resnet101_2($/;"	f
wide_resnet101_2	src/retina_detection/third_party/torchvision/resnet.py	/^def wide_resnet101_2($/;"	f
wide_resnet50_2	src/retina_detection/third_party/resnet.py	/^def wide_resnet50_2($/;"	f
wide_resnet50_2	src/retina_detection/third_party/torchvision/resnet.py	/^def wide_resnet50_2($/;"	f
world_size	src/retina_detection/train/train.py	/^    world_size = torch.cuda.device_count() if use_cuda else 1  # GPUS or a CPU$/;"	v
